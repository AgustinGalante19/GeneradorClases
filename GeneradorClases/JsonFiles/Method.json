{
  "Metodos": [
    {
      "alcance": "public",
      "nombre": "",
      "tipo": "void",
      "parametros": [],
      "contenido": "\n\tvar withBlock = mTablaConfig;\n\twithBlock.lg_identity = true;\n\twithBlock.cd_tabla = Cet006.TablaOL;\n\twithBlock.ds_vista = Cet006.TablaOL;\n\twithBlock.campo_id = \"\";\n\twithBlock.campo_cd = \"\";\n \twithBlock.campo_ds = \"\";\n\tps_set_default();\n"
    },
    {
      "alcance": "public",
      "nombre": "Cargar",
      "tipo": "string",
      "parametros": [
        {
          "tipo": "long",
          "nombre": "plng_ID = 0"
        },
        {
          "tipo": "CVM.ABMope",
          "nombre": "plng_ID = null"
        },
        {
          "tipo": "bool",
          "nombre": "pbln_EsCopia = false"
        }
      ],
      "contenido": "\n\tCVM.Sql lsql;\n\tstring lstr_res = \"\"; \n\tif (plng_ID != 0)\n\tthis.ID = plng_ID;\n\tif (this.ID == 0)\n\treturn \"Parámetros Insuficientes\";\n\tlsql = new CVM.Sql();\n\t{\n\t\tvar withBlock = lsql;\n\t\twithBlock.q_SELECT(\"v1.*\");\n\t\twithBlock.q_FROM(mTablaConfig.ds_vista, \"V1\");\n\t\twithBlock.w_WHERE(withBlock.SqlCondicion_ID(mTablaConfig.campo_id(\"v1\"), this.ID));\n\t}\n\tlstr_res = this.CargarDesdeSQL(lsql);\n\tlsql = null;\n\tif (pbln_EsCopia)\n\t{\n\t}\n\treturn lstr_res;\n"
    },
    {
      "alcance": "public",
      "nombre": "CargarDesdeSQL",
      "tipo": "string",
      "parametros": [
        {
          "tipo": "CVM.Sql",
          "nombre": "psql"
        },
        {
          "tipo": "bool",
          "nombre": "pbln_DebeExistir  = true"
        }
      ],
      "contenido": "\n\tDataTable lTab = new DataTable();\n\tstring lstr_res =\"\";\n\t{\n\t\tvar withBlock = psql;\n\t\tlstr_res = withBlock.EjecutarDT(lTab);\n\t}\n\tif (lstr_res == \"OK\")\n\t\tlstr_res = this.CargarDesdeDR(lTab, pbln_DebeExistir);\n\tlTab = null;\n\treturn lstr_res;\n"
    },
    {
      "alcance": "public",
      "nombre": "CargarDesdeDR",
      "tipo": "string",
      "parametros": [
        {
          "tipo": "DataTable",
          "nombre": "pTab"
        },
        {
          "tipo": "bool",
          "nombre": "pbln_DebeExistir"
        }
      ],
      "contenido": "\n\tstring lstr_res = \"OK\";\n\tif (pTab.Rows.Count > 0)\n\t\tlstr_res = this.CargarDesdeDR(pTab.Rows(0));\n\telse if (pbln_DebeExistir)\n\t\tlstr_res = \"No Existen Registros\";\n\treturn lstr_res;\n"
    },
    {
      "alcance": "public",
      "nombre": "CargarDesdeDR",
      "tipo": "string",
      "parametros": [
        {
          "tipo": "DataRow",
          "nombre": "pReg"
        }
      ],

      "contenido": "\n\t[NombrePropiedad] = CVM.DR.Lng(pReg, \"[TagPropiedad]\");"
    },
    {
      "alcance": "public",
      "nombre": "CargarDR",
      "tipo": "string",
      "parametros": [
        {
          "tipo": "ref DataRow",
          "nombre": "pReg"
        }
      ],
      "contenido": "\n\t\tCVM.DRSet.Lng(pReg, \"[TagPropiedad]\", [NombrePropiedad]);"
    },
    {
      "alcance": "public",
      "nombre": "Actualizar",
      "tipo": "string",
      "parametros": [],
      "contenido": "\n\tCVM.Sql lsql;\n\tlong llng_identity = -1;\n\tSqlClient.SqlConnection pCnn = default;\n\tSqlClient.SqlTransaction pTrn = default;\n\tstring lstr_res = \"OK\";\n\tif (!mbln_puede_actualizar)\n\t{\n\t\treturn \"Validación Pendiente\";\n\t}\n\t// If Me.Ope.EsAnula Or Me.Ope.EsActiva Then\n\t// Return pf_act_estado(Me.Ope.EsAnula, Me.Ope.EsActiva)\n\t// End If\n\t// -- --------------------------------------------------\n\t// -- apertura de base de datos\n\t// -- --------------------------------------------------\n\tlstr_res = CVM.BdSql.IniciarOperacion(pCnn, pTrn, true, true);\n\t// ------------------------------------------------------\n\t// Elimino tablas asociadas\n\t// ------------------------------------------------------\n\t// If lstr_res = \"OK\" AndAlso Me.Ope.EsBaja Then\n\t// lstr_res = pf_EliminarRelaciones(pCnn, pTrn)\n\t// End If\n\t// ------------------------------------------------------\n\t// CE registro VIEJO\n\t// ------------------------------------------------------\n\t// If lstr_res = \"OK\" Then lstr_res = mfstr_ce(pCnn, pTrn, CVM.Cons.CE_Registro.Viejo)\n\t// ------------------------------------------------------\n\t// ABM de Cabecera\n\t// ------------------------------------------------------\n\tif (lstr_res == \"OK\")\n\t{\n\t\tlsql = new CVM.Sql(mTablaConfig.cd_tabla);\n\t\t{\n\t\t\tref var withBlock = ref lsql;\n\t\t\tif (this.Ope.SqlConSET)\n\t\t\t{\n\t\t\t\tps_set_default(true, pCnn, pTrn);\n\t\t\t\tps_set_campos(lsql);\n\t\t\t}\n\t\t\tif (this.Ope.SqlConWHERE)\n\t\t\t{\n\t\t\t\twithBlock.w_WHERE(withBlock.SqlCondicion_ID(mTablaConfig.campo_id, this.ID));\n\t\t\t}\n\t\t\tlstr_res = withBlock.Ejecutar(this.Ope.OpeSQL, pCnn, pTrn, mTablaConfig.lg_identity, llng_identity);\n\t\t\tif (lstr_res == \"OK\" & this.Ope.EsAlta & mTablaConfig.lg_identity)\n\t\t\t\tthis.ID = llng_identity;\n\t\t}\n\t\tlsql = default;\n\t}\n\t\t//------------------------------------------------------\n\t\t// CE registro NUEVO\n\t\t// ------------------------------------------------------\n\t\t// If lstr_res = \"OK\" Then lstr_res = mfstr_ce(pCnn, pTrn, CVM.Cons.CE_Registro.Nuevo)\n\t\t// -- --------------------------------------------------\n\t\t// -- cierro\n\t\t// -- --------------------------------------------------\n\tlstr_res = CVM.BdSql.CerrarOperacion(pCnn, pTrn, true, true, lstr_res == \"OK\", lstr_res);\n\treturn lstr_res;\n"
    },
    {
      "alcance": "public",
      "nombre": "PuedeActualizar",
      "tipo": "bool",
      "parametros": [],
      "contenido": "\n\tmValida = new CVM.Validar();\n\t// -- ----------------------------------------\n\t// -- VALIDACION\n\t// -- ----------------------------------------\n\t// -- ALTA o MODIFICA\n\tif (this.Ope.EsAltaOModi)\n\t{\n\t\tps_ValidarRepetido(); // MMM antes Existe\n\t\tif (mValida.TodoOK)\n\t\t{\n\t\t\t// mobj_valida.ValidarRequerido(Me.cd_tabla, \"T\", \"Tabla\")\n\t\t\t// mobj_valida.ValidarRequerido(Me.ds_mensaje, \"T\", \"Mensaje\")\n\t\t}\n\t}\n\t// -- BAJA\n\telse if (this.Ope.EsBaja)\n\t{\n\t\tps_PuedeEliminar();\t\n\t}\n\telse if (this.Ope.EsAnula)\n\t{\n\t\tps_PuedeAnular();\n\t}\n\telse if (this.Ope.EsActiva)\n\t{\n\t\tps_PuedeActivar();\n\t}\n\n\tmbln_puede_actualizar = !mValida.HayErrores;\n\t// -- ----------------------------------------\n\t// -- Muestro Resultado\n\t// -- Si no quiero mostrar, agregar parametro\n\t// -- ----------------------------------------\n\treturn mValida.MostrarResultado();\n"
    },
    {
      "alcance": "private",
      "nombre": "ps_PuedeEliminar",
      "tipo": "void",
      "parametros": [],
      "contenido": ""
    },
    {
      "alcance": "private",
      "nombre": "ps_PuedeAnular",
      "tipo": "void",
      "parametros": [],
      "contenido": ""
    },
    {
      "alcance": "private",
      "nombre": "ps_PuedeActiva",
      "tipo": "void",
      "parametros": [],
      "contenido": ""
    },
    {
      "alcance": "private",
      "nombre": "ps_ValidarRepetido",
      "tipo": "void",
      "parametros": [],
      "contenido": ""
    },
    {
      "alcance": "private",
      "nombre": "ps_set_default",
      "tipo": "void",
      "parametros": [
        {
          "tipo": "bool",
          "nombre": "pbln_PreActualizar = false"
        },
        {
          "tipo": "SqlClient.SqlConnection",
          "nombre": "pCnn = default"
        },
        {
          "tipo": " SqlClient.SqlTransaction",
          "nombre": "pTrn = default"
        }
      ],
      "contenido": "\t{\n\t\tref var withBlock = ref this;\n\t\tif (pbln_PreActualizar)\n\t\t{\n\t\t\tif (this.Ope.EsAlta)\n\t\t\t{\n\t\t\t\twithBlock.ID = mTablaConfig.ProximoID(pCnn, pTrn);\n\t\t\t}\n\t\t}\n\t}\n"
    },
    {
      "alcance": "private",
      "nombre": "ps_set_campos",
      "tipo": "void",
      "parametros": [
        {
          "tipo": "CVM.Sql",
          "nombre": "psql"
        }
      ],
      "contenido": "[CondicionalID]\n\tpsql.q_SET(\"[TagPropiedad]\", this.[NombrePropiedad], \"[TipoPropiedad]\");"
    },
    {
      "alcance": "public",
      "nombre": "CargarDefaultAlta",
      "tipo": "void",
      "parametros": [
        {
          "tipo": "int",
          "nombre": "pint_id_periodo"
        },
        {
          "tipo": "string",
          "nombre": "pstr_ccorpor"
        }
      ],
      "contenido": "\t{\n\t\tref var withBlock = ref this;\n\t\twithBlock.id_cet006 = 0;\n\t\twithBlock.fddjjliva = pint_id_periodo;\n\t\twithBlock.ccorpor = pstr_ccorpor;\n\t\twithBlock.cusuario = CVM.RT.Usuario.cd_usuario;\n\t\twithBlock.factualz = CVM.RT.Hoy(\"YYYYMMDD\");\n\t\twithBlock.hsactualz = CVM.RT.Hora(\"HHMMSS\");\n\t\twithBlock.cprocesoau = withBlock.cusuario;\n\t\twithBlock.factualzau = withBlock.factualz;\n\t\twithBlock.hsactualza = withBlock.hsactualz;\n\t}"
    },
    {
      "alcance": "public",
      "nombre": "Ope",
      "tipo": "CVM.ABMope",
      "parametros": [],
      "contenido": "\tget\n\t{\n\t\treturn this.mOpe;\n\t}"
    },
    {
      "alcance": "public",
      "nombre": "tp_ope",
      "tipo": "string",
      "parametros": [],
      "contenido": "\tget\n\t{\n\t\treturn this.Ope.tp_ope;\n\t}"
    },
    {
      "alcance": "public",
      "nombre": "Valida",
      "tipo": "CVM.Validar",
      "parametros": [],
      "contenido": "\tget\n\t{\n\t\treturn this.mValida;\t\n\t}"
    }
  ]
}
